import { NextResponse } from 'next/server';
import { createAuthToken } from '@/lib/auth';

export const dynamic = "force-dynamic";

export async function POST(request: Request) {
  try {
    const { code } = await request.json();

    // GOV.BR OAuth2 configuration
    const govBrTokenUrl = 'https://sso.acesso.gov.br/token';
    const govBrUserInfoUrl = 'https://sso.acesso.gov.br/userinfo';
    const clientId = process.env.GOVBR_CLIENT_ID;
    const clientSecret = process.env.GOVBR_CLIENT_SECRET;
    const redirectUri = process.env.GOVBR_REDIRECT_URI;

    // Exchange authorization code for access token
    const tokenResponse = await fetch(govBrTokenUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        Authorization: `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`,
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code,
        redirect_uri: redirectUri!,
      }),
    });

    if (!tokenResponse.ok) {
      throw new Error('Failed to get access token from GOV.BR');
    }

    const tokenData = await tokenResponse.json();

    // Get user info using access token
    const userInfoResponse = await fetch(govBrUserInfoUrl, {
      headers: {
        Authorization: `Bearer ${tokenData.access_token}`,
      },
    });

    if (!userInfoResponse.ok) {
      throw new Error('Failed to get user info from GOV.BR');
    }

    const userInfo = await userInfoResponse.json();

    // Create user session token
    const authToken = await createAuthToken({
      userId: userInfo.sub,
      role: 'user',
      organizationId: undefined,
    });

    return NextResponse.json({ token: authToken });
  } catch (error) {
    console.error('GOV.BR authentication error:', error);
    return NextResponse.json(
      { error: 'Authentication failed' },
      { status: 401 }
    );
  }
}