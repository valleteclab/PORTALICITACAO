"use client"

import { useState, useEffect } from "react"
import { useParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

export default function ProcessBidsPage() {
  const params = useParams()
  const [bids, setBids] = useState([])
  const [process, setProcess] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchData()
  }, [params.id])

  const fetchData = async () => {
    try {
      const [processResponse, bidsResponse] = await Promise.all([
        fetch(`/api/processes/${params.id}`),
        fetch(`/api/processes/${params.id}/bids`)
      ])
      
      const processData = await processResponse.json()
      const bidsData = await bidsResponse.json()
      
      setProcess(processData)
      setBids(bidsData)
      setLoading(false)
    } catch (error) {
      console.error('Error fetching data:', error)
      setLoading(false)
    }
  }

  const handleEndBidding = async () => {
    try {
      await fetch(`/api/processes/${params.id}/end-bidding`, {
        method: 'POST'
      })
      fetchData()
    } catch (error) {
      console.error('Error ending bidding:', error)
    }
  }

  return (
    <div className="container mx-auto p-6">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Lances - {process?.title}</CardTitle>
          {process?.status === 'IN_PROGRESS' && (
            <Button onClick={handleEndBidding}>
              Encerrar Fase de Lances
            </Button>
          )}
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Data/Hora</TableHead>
                <TableHead>Valor</TableHead>
                {!process?.isAnonymous && <TableHead>Fornecedor</TableHead>}
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {bids.map((bid: any) => (
                <TableRow key={bid.id}>
                  <TableCell>
                    {new Date(bid.createdAt).toLocaleString()}
                  </TableCell>
                  <TableCell>R$ {bid.value.toFixed(2)}</TableCell>
                  {!process?.isAnonymous && (
                    <TableCell>{bid.user.name}</TableCell>
                  )}
                  <TableCell>{bid.status}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}