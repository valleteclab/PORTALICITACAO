"use client";

import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/components/ui/use-toast";

interface BidMonitoring {
  id: string;
  number: string;
  supplier: string;
  currentBid: number;
  lastBidTime: string;
  status: "active" | "paused" | "finished";
}

export default function SuperAdminDashboard() {
  const [activeBids, setActiveBids] = useState<BidMonitoring[]>([
    {
      id: "1",
      number: "001/2024",
      supplier: "Empresa A",
      currentBid: 50000.00,
      lastBidTime: "2024-03-20T14:30:00",
      status: "active"
    },
    {
      id: "2",
      number: "002/2024",
      supplier: "Empresa B",
      currentBid: 75000.00,
      lastBidTime: "2024-03-20T14:35:00",
      status: "active"
    }
  ]);

  const { toast } = useToast();

  const handleEndBidding = (bidId: string) => {
    setActiveBids(prev => 
      prev.map(bid => 
        bid.id === bidId 
          ? { ...bid, status: "finished" as const } 
          : bid
      )
    );

    toast({
      title: "Fase de lances encerrada",
      description: `A fase de lances da licitação ${bidId} foi encerrada manualmente.`,
    });
  };

  const handlePauseBidding = (bidId: string) => {
    setActiveBids(prev => 
      prev.map(bid => 
        bid.id === bidId 
          ? { ...bid, status: bid.status === "paused" ? "active" as const : "paused" as const } 
          : bid
      )
    );

    toast({
      title: "Status da licitação atualizado",
      description: `A licitação ${bidId} foi ${activeBids.find(b => b.id === bidId)?.status === "paused" ? "reativada" : "pausada"}.`,
    });
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">Painel SuperAdmin</h1>
        <Button variant="outline">Atualizar Dados</Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-2">Licitações Ativas</h3>
          <p className="text-3xl font-bold text-blue-600">{activeBids.filter(b => b.status === "active").length}</p>
        </Card>

        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-2">Total de Lances Hoje</h3>
          <p className="text-3xl font-bold text-green-600">157</p>
        </Card>

        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-2">Usuários Online</h3>
          <p className="text-3xl font-bold text-purple-600">23</p>
        </Card>
      </div>

      <Card>
        <div className="p-6">
          <h2 className="text-xl font-semibold mb-4">Monitoramento de Lances em Tempo Real</h2>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Número</TableHead>
                <TableHead>Fornecedor</TableHead>
                <TableHead>Lance Atual</TableHead>
                <TableHead>Último Lance</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Ações</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {activeBids.map((bid) => (
                <TableRow key={bid.id}>
                  <TableCell>{bid.number}</TableCell>
                  <TableCell>{bid.supplier}</TableCell>
                  <TableCell>R$ {bid.currentBid.toLocaleString('pt-BR')}</TableCell>
                  <TableCell>
                    {new Date(bid.lastBidTime).toLocaleString('pt-BR')}
                  </TableCell>
                  <TableCell>
                    <Badge variant={
                      bid.status === "active" ? "success" :
                      bid.status === "paused" ? "warning" : "secondary"
                    }>
                      {bid.status === "active" ? "Ativo" :
                       bid.status === "paused" ? "Pausado" : "Finalizado"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePauseBidding(bid.id)}
                        disabled={bid.status === "finished"}
                      >
                        {bid.status === "paused" ? "Reativar" : "Pausar"}
                      </Button>
                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => handleEndBidding(bid.id)}
                        disabled={bid.status === "finished"}
                      >
                        Encerrar
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </Card>

      <Card>
        <div className="p-6">
          <h2 className="text-xl font-semibold mb-4">Log de Atividades</h2>
          <div className="space-y-4">
            {[
              {
                time: "14:35:22",
                event: "Novo lance registrado na licitação 002/2024",
                type: "info"
              },
              {
                time: "14:34:15",
                event: "Fornecedor desconectado da sessão 001/2024",
                type: "warning"
              },
              {
                time: "14:33:00",
                event: "Nova licitação iniciada: 003/2024",
                type: "success"
              }
            ].map((log, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <div className="text-sm text-gray-500">{log.time}</div>
                <div className="flex-1">{log.event}</div>
                <Badge variant={
                  log.type === "info" ? "default" :
                  log.type === "warning" ? "warning" : "success"
                }>
                  {log.type}
                </Badge>
              </div>
            ))}
          </div>
        </div>
      </Card>
    </div>
  );
}