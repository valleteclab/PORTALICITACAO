generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  organization  Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  bids          Bid[]
  contracts     Contract[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  cnpj      String   @unique
  type      OrgType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users     User[]
  processes ProcurementProcess[]
}

model ProcurementProcess {
  id          String   @id @default(uuid())
  number      String   @unique
  title       String
  description String
  status      ProcessStatus @default(DRAFT)
  type        ProcessType
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bids       Bid[]
  contracts  Contract[]
  documents  Document[]
}

model Bid {
  id          String   @id @default(uuid())
  value       Float
  status      BidStatus @default(PENDING)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  process     ProcurementProcess @relation(fields: [processId], references: [id])
  processId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contract {
  id          String   @id @default(uuid())
  number      String   @unique
  value       Float
  status      ContractStatus @default(DRAFT)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  process     ProcurementProcess @relation(fields: [processId], references: [id])
  processId   String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id          String   @id @default(uuid())
  title       String
  type        DocumentType
  url         String
  process     ProcurementProcess? @relation(fields: [processId], references: [id])
  processId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  USER
  SUPPLIER
}

enum OrgType {
  CITY_HALL
  CITY_COUNCIL
}

enum ProcessStatus {
  DRAFT
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProcessType {
  BIDDING
  DIRECT
  INEXIGIBLE
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContractStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DocumentType {
  NOTICE
  TECHNICAL_REFERENCE
  CONTRACT
  ADDENDUM
}