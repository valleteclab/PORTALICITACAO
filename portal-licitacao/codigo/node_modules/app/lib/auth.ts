import { cookies } from 'next/headers';
import { type NextRequest } from 'next/server';

const TOKEN_NAME = 'auth_token';

interface AuthPayload {
  userId: string;
  role: string;
  organizationId?: string;
}

export async function getAuthToken(): Promise<string | undefined> {
  const cookieStore = cookies();
  return cookieStore.get(TOKEN_NAME)?.value;
}

export async function setAuthToken(token: string) {
  const cookieStore = cookies();
  cookieStore.set(TOKEN_NAME, token, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict',
    maxAge: 60 * 60 * 24 // 24 hours
  });
}

export async function removeAuthToken() {
  const cookieStore = cookies();
  cookieStore.delete(TOKEN_NAME);
}

export async function verifyAuth(request: NextRequest) {
  const token = request.cookies.get(TOKEN_NAME)?.value;
  if (!token) return null;

  try {
    // In a real application, you would verify the token here
    // For now, we'll just parse it as JSON
    const payload = JSON.parse(atob(token.split('.')[1])) as AuthPayload;
    return payload;
  } catch (err) {
    return null;
  }
}

export async function govBrLogin(code: string) {
  try {
    // This is a placeholder for the actual GOV.BR integration
    // You would implement the OAuth2 flow here using the GOV.BR API
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/govbr`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ code }),
    });

    if (!response.ok) {
      throw new Error('Failed to authenticate with GOV.BR');
    }

    const data = await response.json();
    return data;
  } catch (err) {
    console.error('Error during GOV.BR login:', err);
    return null;
  }
}

export async function createAuthToken(payload: AuthPayload): Promise<string> {
  // In a real application, you would sign this token with a secret key
  // For now, we'll just base64 encode it
  const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));
  const body = btoa(JSON.stringify(payload));
  const signature = btoa('signature'); // This would be a real signature in production

  return `${header}.${body}.${signature}`;
}